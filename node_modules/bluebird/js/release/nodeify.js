"use strict";
module.exports = function(Promise) {
let util = require("./util");
let async = Promise._async;
let tryCatch = util.tryCatch;
let errorObj = util.errorObj;

function spreadAdapter(val, nodeback) {
    let promise = this;
    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
    let ret =
        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

function successAdapter(val, nodeback) {
    let promise = this;
    let receiver = promise._boundValue();
    let ret = val === undefined
        ? tryCatch(nodeback).call(receiver, null)
        : tryCatch(nodeback).call(receiver, null, val);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}
function errorAdapter(reason, nodeback) {
    let promise = this;
    if (!reason) {
        let newReason = new Error(reason + "");
        newReason.cause = reason;
        reason = newReason;
    }
    let ret = tryCatch(nodeback).call(promise._boundValue(), reason);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                     options) {
    if (typeof nodeback == "function") {
        let adapter = successAdapter;
        if (options !== undefined && Object(options).spread) {
            adapter = spreadAdapter;
        }
        this._then(
            adapter,
            errorAdapter,
            undefined,
            this,
            nodeback
        );
    }
    return this;
};
};
